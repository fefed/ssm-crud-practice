<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1">
    <!--
          1. 配置 监听器实现Spring启动加载
          2. 配置 SpringMVC前端控制器
          3. 配置 编码过滤器
          4. 配置 Hidden请求方法过滤器
    -->

    <!-- ======================================================= -->

    <!--自定义Spring配置文件的位置和名称-->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:spring.xml</param-value>
    </context-param>
    <!-- 配置Spring的监听器，在服务器启动时加载Spring的配置文件 -->
    <listener>
        <!-- Spring配置文件默认位置和名称：/WEB-INF/applicationContext.xml
             可通过上下文参数自定义Spring配置文件的位置和名称 -->
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>


    <!-- ======================================================= -->
    <!--配置SpringMVC的前端控制器DispatcherServlet-->
    <servlet>
        <servlet-name>DispatcherServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--设置SpringMVC配置文件自定义的位置和名称-->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:springmvc.xml</param-value>
        </init-param>
        <!-- 作为框架的核心组件，在启动过程中有大量的初始化操作要做
             而这些操作放在第一次请求时才执行会严重影响访问速度
             因此需要通过此标签将启动控制DispatcherServlet的初始化时间提前到服务器启动时 -->
        <!--将DispatcherServlet的初始化时间提前到服务器启动时-->
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>DispatcherServlet</servlet-name>
        <!-- 设置springMVC的核心控制器所能处理的请求的请求路径,/ 所匹配的请求
             可以是/login或.html或.js或.css方式的请求路径,但是/不能匹配.jsp请求路径的请求-->
        <url-pattern>/</url-pattern>
    </servlet-mapping>


    <!-- ======================================================= -->
    <!--配置Spring的编码过滤器-->
    <!--解决获取请求参数的乱码问题，可以使用SpringMVC提供的编码过滤器CharacterEncodingFilter，但是
        必须在web.xml中进行注册-->
    <!--配置字符编码过滤器，一定要放在所有过滤器之前，/* 表示拦截所有请求-->
    <filter>
        <filter-name>CharacterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <!--没有下面的话只会处理请求编码，响应编码不处理-->
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>CharacterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>


    <!-- ======================================================= -->
    <!--配置处理请求方式的过滤器-->
    <!--常用的请求方式有get，post，put，delete,但是目前浏览器只支持get和post，
        若在form表单提交时，为method设置了其他请求方式的字符串（put或delete）,则按照默认的请求方式get处理
        若要发送put和delete请求，则需要通过spring提供的过滤器HiddenHttpMethodFilter
        SpringMVC 提供了 HiddenHttpMethodFilter 帮助我们将 POST 请求转换为 DELETE 或 PUT 请求
        HiddenHttpMethodFilter 处理put和delete请求的条件：
          a> 当前请求的请求方式必须为post
          b> 当前请求必须传输请求参数_method
        满足以上条件，HiddenHttpMethodFilter 过滤器就会将当前请求的请求方式转换为请求参数_method的值-->
    <filter>
        <filter-name>HiddenHttpMethodFilter</filter-name>
        <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>HiddenHttpMethodFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
</web-app>
